




import React, { useEffect, useRef, useState } from "react";
import { X, Upload } from "lucide-react";
import gsap from "gsap";
import ScrollTrigger from "gsap/ScrollTrigger";

gsap.registerPlugin(ScrollTrigger);

function CreateToken({ isOpen, onClose }) {
  // Receive props
  const formRef = useRef(null);
  const [selectedOption, setSelectedOption] = useState(null);
  const [showMors, setShowMors] = useState(true); // This controls the "showMore" section

  const handleOptionChange = (event) => {
    setSelectedOption(event.target.value);
  };
  const [showMore, setShowMore] = useState(false);
  const [dragActive, setDragActive] = useState(false);

  useEffect(() => {
    const formElement = formRef.current;
    if (!formElement) return;

    gsap.set(formElement, {
      yPercent: 100,
      opacity: 0,
      display: "none",
    });

    const tl = gsap.timeline();

    tl.to(formElement, {
      display: "block",
      duration: 0,
    }).to(formElement, {
      yPercent: 0,
      opacity: 1,
      duration: 0.5,
      ease: "power2.out",
    });

    if (isOpen) {
      tl.play();
    } else {
      tl.reverse();
    }

    return () => {
      tl.kill();
    };
  }, [isOpen]);

  // Drag event handler
  const handleDrag = (e) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true);
    } else if (e.type === "dragleave") {
      setDragActive(false);
    }
  };

  // Handle the file drop
  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      const file = e.dataTransfer.files[0];
      console.log("File dropped:", file);
    }
  };

  // Handle file selection via button
  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      console.log("File selected:", file);
    }
  };

  return (
    
    <div
      ref={formRef}
      className="fixed inset-x-0 bottom-0 text-sm shadow-[0_0_20px_0_rgba(0,0,0,1) z-50 bg-[#0000004a] backdrop-blur-md rounded-md border-gray-800 p-6  max-w-2xl mx-auto"
      style={{
        fontFamily: "objectsans",
        letterSpacing: "0.06em",
      }}
    >
      <button
        className="absolute right-5 top-3 text-gray-400 hover:text-white"
        onClick={onClose} // Close form using prop
      >
        <X className="h-8  w-8" />
      </button>

      <form onSubmit={(e) => e.preventDefault()} className="space-y-6">
        <div
          className="space-y-4 uppercase text-white"
          style={{
            transition: "all 2s",
          }}
        >
          <div>
            <label className="block  mb-2">name</label>
            <input className="w-full p-2 bg-[#00000057]  border border-black  text-white rounded" />
          </div>

          <div>
            <label className="block   mb-2">ticker</label>
            <div className="relative">
              <span className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400">
                $
              </span>
              <input
                type="number"
                className="w-full p-2  bg-[#00000057] border border-black text-white rounded pl-8"
              />
            </div>
          </div>

          <div>
            <label className="block text-sm  mb-2">description</label>
            <textarea className="w-full p-2 bg-[#00000057] border border-black text-white rounded min-h-[100px]" />
          </div>

          <div>
            <label className="block text-sm mb-2">Image</label>
            <div
              className={`border-2 border-dashed rounded-lg p-8 text-center ${
                dragActive
                  ? "border-blue-500 bg-blue-500/10"
                  : "border-gray-700"
              }`}
              onDragEnter={handleDrag}
              onDragLeave={handleDrag}
              onDragOver={handleDrag}
              onDrop={handleDrop}
            >
              {/* Assuming Upload is a component you imported */}
              <Upload className="mx-auto h-8 w-8 text-red-800 mb-2" />
              {/* Placeholder for Upload component */}
              <p className="text-gray-400 text-sm mb-2">
                Drag and drop an image
              </p>
              {/* File input for selecting a file */}
              <input
                type="file"
                id="fileInput"
                className="hidden"
                onChange={handleFileChange}
              />
              <button
                className="px-4 py-2 bg-black text-whiteborder text-sm border-black rounded"
                onClick={() => document.getElementById("fileInput").click()}
              >
                Select File
              </button>
            </div>
          </div>
        </div>

        <div>
          <button
            type="button"
            onClick={() => setShowMore(!showMore)}
            className="text-blue-400 hover:text-blue-300 text-sm flex items-center gap-1"
          >
            show more options
            <span
              className={`transition-transform ${showMore ? "rotate-180" : ""}`}
            >
              â†“
            </span>
          </button>

          {showMore && (
            <div
              className="mt-4 space-y-4 uppercase"
              style={{
                letterSpacing: "0.2em",
              }}
            >
              <div>
                <label className="block mb-2">click one</label>
                <div className="space-x-10  ">
                  <label>
                    <input
                      type="radio"
                      name="inflationary-deflationary"
                      value="deflationary"
                      checked={selectedOption === "deflationary"}
                      onChange={handleOptionChange}
                    />
                    Inflationary
                  </label>

                  <label>
                    <input
                      type="radio"
                      name="inflationary-deflationary"
                      value="inflationary"
                      checked={selectedOption === "inflationary"}
                      onChange={handleOptionChange}
                    />
                    Deflationary
                  </label>
                </div>
              </div>

              {showMors && selectedOption === "inflationary" && (
                <div className="mt-4 space-y-4">
                  <div>
                    <label className="block mb-2">Total supply</label>
                    <input
                      type="number"
                      className="w-full p-2 bg-[#00000057] border border-black text-white rounded"
                    />
                  </div>
                </div>
              )}
            </div>
          )}
        </div>

        <button className="w-full bg-[#ffffff27] hover:bg-green-900 text-white p-2 rounded">
          create coin
        </button>

        <div className="text-center space-y-2">
          <p className="text-green-800 text-sm">
            Connect your wallet and sign in to create a coin
          </p>
          <p className="text-gray-400 text-sm">
            when your coin completes its bonding curve you receive 0.5 SOL
          </p>
        </div>
      </form>
    </div>
  );
}

export default CreateToken;
